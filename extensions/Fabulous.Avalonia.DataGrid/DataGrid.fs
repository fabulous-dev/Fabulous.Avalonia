namespace Fabulous.Avalonia

open System.Collections
open System.Runtime.CompilerServices
open Avalonia.Controls
open Avalonia.Controls.Primitives
open Avalonia.Media
open Avalonia.Styling
open Fabulous
open Fabulous.Avalonia
open Fabulous.StackAllocatedCollections

type IFabDataGrid =
    inherit IFabTemplatedControl

module DataGrid =
    let WidgetKey = Widgets.register<DataGrid>()

    let Columns =
        Attributes.defineAvaloniaNonGenericListWidgetCollection "DataGrid_Columns" (fun target -> (target :?> DataGrid).Columns :> IList)

    let IsReadOnly =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.IsReadOnlyProperty

    let AutoGeneratedColumns =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.AutoGenerateColumnsProperty

    let CanUserReorderColumns =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.CanUserReorderColumnsProperty

    let CanUserResizeColumns =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.CanUserResizeColumnsProperty

    let CanUserSortColumns =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.CanUserSortColumnsProperty

    let GridLinesVisibility =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.GridLinesVisibilityProperty

    let ColumnHeaderHeight =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.ColumnHeaderHeightProperty

    let ColumnWidth =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.ColumnWidthProperty

    let RowTheme =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.RowThemeProperty

    let CellTheme =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.CellThemeProperty

    let ColumnHeaderTheme =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.ColumnHeaderThemeProperty

    let RowGroupTheme =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.RowGroupThemeProperty

    let FrozenColumnCount =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.FrozenColumnCountProperty

    let HeadersVisibility =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.HeadersVisibilityProperty

    let HorizontalGridLinesBrush =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.HorizontalGridLinesBrushProperty

    let HorizontalGridLinesBrushWidget =
        Attributes.defineAvaloniaPropertyWidget DataGrid.HorizontalGridLinesBrushProperty

    let HorizontalScrollBarVisibility =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.HorizontalScrollBarVisibilityProperty

    let AreRowGroupHeadersFrozen =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.AreRowGroupHeadersFrozenProperty

    let MaxColumnWidth =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.MaxColumnWidthProperty

    let MinColumnWidth =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.MinColumnWidthProperty

    let RowBackground =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.RowBackgroundProperty

    let RowBackgroundWidget =
        Attributes.defineAvaloniaPropertyWidget DataGrid.RowBackgroundProperty

    let RowHeight =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.RowHeightProperty

    let RowHeaderWidth =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.RowHeaderWidthProperty

    let SelectionMode =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.SelectionModeProperty

    let VerticalGridLinesBrush =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.VerticalGridLinesBrushProperty

    let VerticalGridLinesBrushWidget =
        Attributes.defineAvaloniaPropertyWidget DataGrid.VerticalGridLinesBrushProperty

    let VerticalScrollBarVisibility =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.VerticalScrollBarVisibilityProperty

    let SelectedIndex =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.SelectedIndexProperty

    let ClipboardCopyMode =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.ClipboardCopyModeProperty

    let AreRowDetailsFrozen =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.AreRowDetailsFrozenProperty

    let RowDetailsVisibilityMode =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.RowDetailsVisibilityModeProperty

    let IsScrollInertiaEnabled =
        Attributes.defineAvaloniaPropertyWithEquality DataGrid.IsScrollInertiaEnabledProperty

    let Items =
        Attributes.definePropertyWithGetSet
            "DataGrid_Items"
            (fun target ->
                let target = target :?> DataGrid
                target.ItemsSource)
            (fun target value ->
                let target = target :?> DataGrid
                target.ItemsSource <- value)

[<AutoOpen>]
module DataGridBuilders =
    type Fabulous.Avalonia.View with

        /// <summary>Creates a DataGrid widget.</summary>
        /// <param name="items">The items to display.</param>
        static member DataGrid(items: #IEnumerable) =
            WidgetBuilder<'msg, IFabDataGrid>(DataGrid.WidgetKey, DataGrid.Items.WithValue(items), DataGrid.AutoGeneratedColumns.WithValue(true))

        /// <summary>Creates a CustomDataGrid widget.</summary>
        /// <param name="items">The items to display.</param>
        static member CustomDataGrid(items: #IEnumerable) =
            CollectionBuilder<'msg, IFabDataGrid, IFabDataGridColumn>(DataGrid.WidgetKey, DataGrid.Columns, DataGrid.Items.WithValue(items))

type DataGridModifiers =
    /// <summary>Link a ViewRef to access the direct DataGrid control instance.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The ViewRef instance that will receive access to the underlying control.</param>
    [<Extension>]
    static member inline reference(this: WidgetBuilder<'msg, IFabDataGrid>, value: ViewRef<DataGrid>) =
        this.AddScalar(ViewRefAttributes.ViewRef.WithValue(value.Unbox))

    /// <summary>Sets the IsReadOnly property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The IsReadOnly value.</param>
    [<Extension>]
    static member inline isReadOnly(this: WidgetBuilder<'msg, #IFabDataGrid>, value: bool) =
        this.AddScalar(DataGrid.IsReadOnly.WithValue(value))

    /// <summary>Sets the AutoGenerateColumns property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The AutoGenerateColumns value.</param>
    [<Extension>]
    static member inline autoGenerateColumns(this: WidgetBuilder<'msg, #IFabDataGrid>, value: bool) =
        this.AddScalar(DataGrid.AutoGeneratedColumns.WithValue(value))

    /// <summary>Sets the CanUserReorderColumns property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The CanUserReorderColumns value.</param>
    [<Extension>]
    static member inline canUserReorderColumns(this: WidgetBuilder<'msg, #IFabDataGrid>, value: bool) =
        this.AddScalar(DataGrid.CanUserReorderColumns.WithValue(value))

    /// <summary>Sets the CanUserResizeColumns property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The CanUserResizeColumns value.</param>
    [<Extension>]
    static member inline canUserResizeColumns(this: WidgetBuilder<'msg, #IFabDataGrid>, value: bool) =
        this.AddScalar(DataGrid.CanUserResizeColumns.WithValue(value))

    /// <summary>Sets the CanUserSortColumns property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The CanUserSortColumns value.</param>
    [<Extension>]
    static member inline canUserSortColumns(this: WidgetBuilder<'msg, #IFabDataGrid>, value: bool) =
        this.AddScalar(DataGrid.CanUserSortColumns.WithValue(value))

    /// <summary>Sets the GridLinesVisibility property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The GridLinesVisibility value.</param>
    [<Extension>]
    static member inline gridLinesVisibility(this: WidgetBuilder<'msg, #IFabDataGrid>, value: DataGridGridLinesVisibility) =
        this.AddScalar(DataGrid.GridLinesVisibility.WithValue(value))

    /// <summary>Sets the ColumnHeaderHeight property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The ColumnHeaderHeight value.</param>
    [<Extension>]
    static member inline columnHeaderHeight(this: WidgetBuilder<'msg, #IFabDataGrid>, value: float) =
        this.AddScalar(DataGrid.ColumnHeaderHeight.WithValue(value))

    /// <summary>Sets the ColumnWidth property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The ColumnWidth value.</param>
    [<Extension>]
    static member inline columnWidth(this: WidgetBuilder<'msg, #IFabDataGrid>, value: DataGridLength) =
        this.AddScalar(DataGrid.ColumnWidth.WithValue(value))

    /// <summary>Sets the ColumnWidth property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The ColumnWidth value.</param>
    [<Extension>]
    static member inline columnWidth(this: WidgetBuilder<'msg, #IFabDataGrid>, value: float) =
        this.AddScalar(DataGrid.ColumnWidth.WithValue(DataGridLength(value)))

    /// <summary>Sets the RowTheme property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The RowTheme value.</param>
    [<Extension>]
    static member inline rowTheme(this: WidgetBuilder<'msg, #IFabDataGrid>, value: ControlTheme) =
        this.AddScalar(DataGrid.RowTheme.WithValue(value))

    /// <summary>Sets the CellTheme property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The CellTheme value.</param>
    [<Extension>]
    static member inline cellTheme(this: WidgetBuilder<'msg, #IFabDataGrid>, value: ControlTheme) =
        this.AddScalar(DataGrid.CellTheme.WithValue(value))

    /// <summary>Sets the ColumnHeaderTheme property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The ColumnHeaderTheme value.</param>
    [<Extension>]
    static member inline columnHeaderTheme(this: WidgetBuilder<'msg, #IFabDataGrid>, value: ControlTheme) =
        this.AddScalar(DataGrid.ColumnHeaderTheme.WithValue(value))

    /// <summary>Sets the RowGroupTheme property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The RowGroupTheme value.</param>
    [<Extension>]
    static member inline rowGroupTheme(this: WidgetBuilder<'msg, #IFabDataGrid>, value: ControlTheme) =
        this.AddScalar(DataGrid.RowGroupTheme.WithValue(value))

    /// <summary>Sets the FrozenColumnCount property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The FrozenColumnCount value.</param>
    [<Extension>]
    static member inline frozenColumnCount(this: WidgetBuilder<'msg, #IFabDataGrid>, value: int) =
        this.AddScalar(DataGrid.FrozenColumnCount.WithValue(value))

    /// <summary>Sets the HeadersVisibility property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The HeadersVisibility value.</param>
    [<Extension>]
    static member inline headersVisibility(this: WidgetBuilder<'msg, #IFabDataGrid>, value: DataGridHeadersVisibility) =
        this.AddScalar(DataGrid.HeadersVisibility.WithValue(value))

    /// <summary>Sets the HorizontalGridLinesBrush property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The HorizontalGridLinesBrush value.</param>
    [<Extension>]
    static member inline horizontalGridLinesBrush(this: WidgetBuilder<'msg, #IFabDataGrid>, value: IBrush) =
        this.AddScalar(DataGrid.HorizontalGridLinesBrush.WithValue(value))

    /// <summary>Sets the HorizontalGridLinesBrush property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The HorizontalGridLinesBrush value.</param>
    [<Extension>]
    static member inline horizontalGridLinesBrush(this: WidgetBuilder<'msg, #IFabDataGrid>, value: WidgetBuilder<'msg, #IFabBrush>) =
        this.AddWidget(DataGrid.HorizontalGridLinesBrushWidget.WithValue(value.Compile()))

    /// <summary>Sets the HorizontalScrollBarVisibility property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The HorizontalScrollBarVisibility value.</param>
    [<Extension>]
    static member inline horizontalScrollBarVisibility(this: WidgetBuilder<'msg, #IFabDataGrid>, value: ScrollBarVisibility) =
        this.AddScalar(DataGrid.HorizontalScrollBarVisibility.WithValue(value))

    /// <summary>Sets the AreRowGroupHeadersFrozen property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The AreRowGroupHeadersFrozen value.</param>
    [<Extension>]
    static member inline areRowGroupHeadersFrozen(this: WidgetBuilder<'msg, #IFabDataGrid>, value: bool) =
        this.AddScalar(DataGrid.AreRowGroupHeadersFrozen.WithValue(value))

    /// <summary>Sets the MaxColumnWidth property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The MaxColumnWidth value.</param>
    [<Extension>]
    static member inline maxColumnWidth(this: WidgetBuilder<'msg, #IFabDataGrid>, value: float) =
        this.AddScalar(DataGrid.MaxColumnWidth.WithValue(value))

    /// <summary>Sets the MinColumnWidth property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The MinColumnWidth value.</param>
    [<Extension>]
    static member inline minColumnWidth(this: WidgetBuilder<'msg, #IFabDataGrid>, value: float) =
        this.AddScalar(DataGrid.MinColumnWidth.WithValue(value))

    /// <summary>Sets the RowBackground property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The RowBackground value.</param>
    [<Extension>]
    static member inline rowBackground(this: WidgetBuilder<'msg, #IFabDataGrid>, value: IBrush) =
        this.AddScalar(DataGrid.RowBackground.WithValue(value))

    /// <summary>Sets the RowBackground property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The RowBackground value.</param>
    [<Extension>]
    static member inline rowBackground(this: WidgetBuilder<'msg, IFabDataGrid>, value: WidgetBuilder<'msg, #IFabBrush>) =
        this.AddWidget(DataGrid.RowBackgroundWidget.WithValue(value.Compile()))

    /// <summary>Sets the RowHeight property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The RowHeight value.</param>
    [<Extension>]
    static member inline rowHeight(this: WidgetBuilder<'msg, #IFabDataGrid>, value: float) =
        this.AddScalar(DataGrid.RowHeight.WithValue(value))

    /// <summary>Sets the RowHeaderWidth property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The RowHeaderWidth value.</param>
    [<Extension>]
    static member inline rowHeaderWidth(this: WidgetBuilder<'msg, #IFabDataGrid>, value: float) =
        this.AddScalar(DataGrid.RowHeaderWidth.WithValue(value))

    /// <summary>Sets the SelectionMode property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The SelectionMode value.</param>
    [<Extension>]
    static member inline selectionMode(this: WidgetBuilder<'msg, #IFabDataGrid>, value: DataGridSelectionMode) =
        this.AddScalar(DataGrid.SelectionMode.WithValue(value))

    /// <summary>Sets the VerticalGridLinesBrush property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The VerticalGridLinesBrush value.</param>
    [<Extension>]
    static member inline verticalGridLinesBrush(this: WidgetBuilder<'msg, #IFabDataGrid>, value: IBrush) =
        this.AddScalar(DataGrid.VerticalGridLinesBrush.WithValue(value))

    /// <summary>Sets the VerticalGridLinesBrush property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The VerticalGridLinesBrush value.</param>
    [<Extension>]
    static member inline verticalGridLinesBrush(this: WidgetBuilder<'msg, IFabDataGrid>, value: WidgetBuilder<'msg, #IFabBrush>) =
        this.AddWidget(DataGrid.VerticalGridLinesBrushWidget.WithValue(value.Compile()))

    /// <summary>Sets the VerticalScrollBarVisibility property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The VerticalScrollBarVisibility value.</param>
    [<Extension>]
    static member inline verticalScrollBarVisibility(this: WidgetBuilder<'msg, #IFabDataGrid>, value: ScrollBarVisibility) =
        this.AddScalar(DataGrid.VerticalScrollBarVisibility.WithValue(value))

    /// <summary>Sets the SelectedIndex property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The SelectedIndex value.</param>
    [<Extension>]
    static member inline selectedIndex(this: WidgetBuilder<'msg, #IFabDataGrid>, value: int) =
        this.AddScalar(DataGrid.SelectedIndex.WithValue(value))

    /// <summary>Sets the ClipboardCopyMode property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The ClipboardCopyMode value.</param>
    [<Extension>]
    static member inline clipboardCopyMode(this: WidgetBuilder<'msg, #IFabDataGrid>, value: DataGridClipboardCopyMode) =
        this.AddScalar(DataGrid.ClipboardCopyMode.WithValue(value))

    /// <summary>Sets the AreRowDetailsFrozen property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The AreRowDetailsFrozen value.</param>
    [<Extension>]
    static member inline areRowDetailsFrozen(this: WidgetBuilder<'msg, #IFabDataGrid>, value: bool) =
        this.AddScalar(DataGrid.AreRowDetailsFrozen.WithValue(value))

    /// <summary>Sets the RowDetailsVisibilityMode property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The RowDetailsVisibilityMode value.</param>
    [<Extension>]
    static member inline rowDetailsVisibilityMode(this: WidgetBuilder<'msg, #IFabDataGrid>, value: DataGridRowDetailsVisibilityMode) =
        this.AddScalar(DataGrid.RowDetailsVisibilityMode.WithValue(value))

    /// <summary>Sets the IsScrollInertiaEnabled property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The IsScrollInertiaEnabled value.</param>
    [<Extension>]
    static member inline isScrollInertiaEnabled(this: WidgetBuilder<'msg, #IFabDataGrid>, value: bool) =
        this.AddScalar(DataGrid.IsScrollInertiaEnabled.WithValue(value))

type DataGridExtraModifiers =
    /// <summary>Sets the HorizontalGridLinesBrush property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The HorizontalGridLinesBrush value.</param>
    [<Extension>]
    static member inline horizontalGridLinesBrush(this: WidgetBuilder<'msg, IFabDataGrid>, value: Color) =
        DataGridModifiers.horizontalGridLinesBrush(this, View.SolidColorBrush(value))

    /// <summary>Sets the HorizontalGridLinesBrush property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The HorizontalGridLinesBrush value.</param>
    [<Extension>]
    static member inline horizontalGridLinesBrush(this: WidgetBuilder<'msg, IFabDataGrid>, value: string) =
        DataGridExtraModifiers.horizontalGridLinesBrush(this, Color.Parse(value))

    /// <summary>Sets the RowBackground property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The RowBackground value.</param>
    [<Extension>]
    static member inline rowBackground(this: WidgetBuilder<'msg, IFabDataGrid>, value: Color) =
        DataGridModifiers.rowBackground(this, View.SolidColorBrush(value))

    /// <summary>Sets the RowBackground property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The RowBackground value.</param>
    [<Extension>]
    static member inline rowBackground(this: WidgetBuilder<'msg, IFabDataGrid>, value: string) =
        DataGridModifiers.rowBackground(this, View.SolidColorBrush(Color.Parse(value)))

    /// <summary>Sets the VerticalGridLinesBrush property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The VerticalGridLinesBrush value.</param>
    [<Extension>]
    static member inline verticalGridLinesBrush(this: WidgetBuilder<'msg, IFabDataGrid>, value: Color) =
        DataGridModifiers.verticalGridLinesBrush(this, View.SolidColorBrush(value))

    /// <summary>Sets the VerticalGridLinesBrush property.</summary>
    /// <param name="this">Current widget.</param>
    /// <param name="value">The VerticalGridLinesBrush value.</param>
    [<Extension>]
    static member inline verticalGridLinesBrush(this: WidgetBuilder<'msg, IFabDataGrid>, value: string) =
        DataGridModifiers.verticalGridLinesBrush(this, View.SolidColorBrush(Color.Parse(value)))

type DataGridCollectionBuilderExtensions =
    [<Extension>]
    static member inline Yield<'msg, 'marker, 'itemType when 'msg: equality and 'itemType :> IFabDataGridColumn>
        (_: CollectionBuilder<'msg, 'marker, IFabDataGridColumn>, x: WidgetBuilder<'msg, 'itemType>)
        : Content<'msg> =
        { Widgets = MutStackArray1.One(x.Compile()) }

    [<Extension>]
    static member inline Yield<'msg, 'marker, 'itemType when 'msg: equality and 'itemType :> IFabDataGridColumn>
        (_: CollectionBuilder<'msg, 'marker, IFabDataGridColumn>, x: WidgetBuilder<'msg, Memo.Memoized<'itemType>>)
        : Content<'msg> =
        { Widgets = MutStackArray1.One(x.Compile()) }
